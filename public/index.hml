<!DOCTYPE html>
<html lang="it">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Planny HTML â€“ pulito</title>

  <!-- ===================== STILI ===================== -->
  <style>
    :root{
      --bg:#f5f7fb;--panel:#ffffff;--surface:#eef2f7;--border:#dfe5ef;--text:#0f1720;--muted:#5b6877;--accent:#2563eb;--accent2:#16a34a;--warn:#d97706;--holiday:#166534;--chip:#f3f8ff;--chipBorder:#cfd9ea;--todayRow:rgba(34,197,94,.18);--nameHeaderBg:#e9f3ff;--nameColBg:#f8fbff;
    }
    html,body{height:100%}
    body{margin:0;background:var(--bg);color:var(--text);font:14px/1.4 system-ui,-apple-system,Segoe UI,Roboto,Ubuntu}
    h1{font-size:20px;margin:0 0 10px}
    .wrap{max-width:1280px;margin:0 auto;padding:16px}
    .card{background:var(--panel);border:1px solid var(--border);border-radius:14px;padding:12px}

    /* topbar */
    #topbar{display:flex;justify-content:space-between;align-items:center;gap:1rem;padding:0.6rem 1rem;border-bottom:1px solid #ddd;background:var(--panel);position:sticky;top:0;width:100%;z-index:100}
    #topbar .left,#topbar .center,#topbar .right{display:flex;align-items:center;gap:0.5rem}
    #topbar .center{position:absolute;left:50%;transform:translateX(-50%)}
    #topbar .right{margin-left:auto}

    label{display:block;font-size:12px;color:var(--muted);margin-bottom:6px}
    input[type="text"],input[type="number"],select{width:100%;box-sizing:border-box;background:var(--surface);border:1px solid var(--border);color:var(--text);border-radius:10px;padding:10px}
    input[disabled]{opacity:.7}

    /* tabs + actions */
    .tabsbar{display:flex;align-items:center;gap:12px;justify-content:space-between;flex-wrap:wrap;margin-top:6px}
    .tabs{display:flex;flex-wrap:nowrap;flex:1 1 auto;min-width:0;gap:4px;overflow:hidden}
    .tab{padding:8px 10px;border-radius:10px;background:var(--surface);border:1px solid var(--border);cursor:pointer;font-weight:600;color:#5b6877;flex:1 1 auto;text-align:center;min-width:0}
    .tab.active{background:var(--accent);color:#07121f;border-color:transparent}
    @media (max-width:768px){.tab{font-size:12px;padding:6px 0}}
    .bar-right{display:flex;gap:8px;align-items:center}
    .btn{appearance:none;border:1px solid var(--border);background:var(--surface);color:var(--text);padding:10px 12px;border-radius:10px;cursor:pointer}
    .btn.mini{padding:6px 10px;font-size:12px}

    /* month grid */
    .month{margin-top:10px;max-height:68vh;overflow-y:auto;overscroll-behavior:contain;-webkit-overflow-scrolling:touch;position:relative;scroll-snap-type:y mandatory;scroll-padding-top:48px}
    table{width:100%;border-collapse:separate;border-spacing:0;position:relative;margin:0;table-layout:fixed}
    th,td{border:1px solid var(--border);padding:0}
    thead th{position:sticky;top:-1px;background:#eef3fa;z-index:6;box-shadow:0 1px 0 var(--border), 0 -1px 0 #eef3fa}
    th.name{min-width:110px;background:var(--nameHeaderBg)}
    th.small{width:70px}
    th.datecol, td.datecol{width:100px;min-width:100px;max-width:100px}

    .rowhdr{background:var(--nameHeaderBg);color:#0f1720;text-align:right;padding:6px 8px;font-weight:700}
    .cell{position:relative;height:40px;background:var(--nameColBg)}
    .cell.selected{outline:2px solid var(--accent);outline-offset:-2px}
    .cell.search-hit{box-shadow: inset 0 0 0 3px #f59e0b}

    /* chip + input */
    td input{width:100%;box-sizing:border-box;border:0;background:transparent;color:var(--text);padding:8px;text-align:center;font:16px/1.2 "Segoe UI",system-ui}
    td input:focus{outline:2px solid var(--accent)}
    .chip{position:absolute;inset:2px;display:flex;align-items:center;justify-content:center;border-radius:12px;border:1px solid var(--chipBorder);background:var(--chip);font-weight:700;cursor:grab;user-select:none;padding:0 10px;font-size:clamp(12px,2vw,16px);white-space:nowrap;overflow:hidden;text-overflow:ellipsis}
    .chip:active{cursor:grabbing}
    .chip.hidden{display:none}

    /* token colori */
    .chip.ts1{color:#ef4444}
    .chip.ts2{color:#3b82f6}
    .chip.att{color:#f59e0b}
    .chip.training{color:#0ea5e9}
    .chip.rec{color:#8b5cf6}
    .chip.holiday{background:var(--holiday);color:#fff}

    /* iOS / touch tweaks (unificati) */
    .chip{-webkit-user-drag:none;user-select:none;touch-action:manipulation}

    /* count LED */
    .count{font-weight:700;text-align:center}
    .led{position:relative}
    .led .dot{display:inline-block;width:10px;height:10px;border-radius:999px;background:#0ea5e9}
    .c-white .dot{background:green}
    .c-yellow .dot{background:yellow}
    .c-orange .dot{background:orange}
    .c-red .dot{background:red}

    /* terminal */
    .terminal{background:#0b0b0b;border:1px solid var(--border);border-radius:14px;padding:10px;color:#c7d1db;font:12px/1.4 ui-monospace,SFMono-Regular,Consolas,Monaco,monospace;height:220px;overflow-y:auto;overflow-x:hidden;word-break:break-word}
    .ln{white-space:pre-wrap;margin:2px 0}
    .ln.info{color:#9bb0c9}.ln.ok{color:#16a34a}.ln.warn{color:#f59e0b}.ln.err{color:#ef4444}

    /* context menu */
    .ctx{position:fixed;z-index:9999;background:#10151c;color:#e2e8f0;border:1px solid #2a3441;border-radius:10px;box-shadow:0 12px 28px rgba(0,0,0,.35);padding:6px;min-width:180px;display:none}
    .ctx .itm{padding:8px 10px;border-radius:8px;cursor:pointer;user-select:none}
    .ctx .itm:hover,.ctx .itm:focus{background:#1b2532;outline:none}
    .ctx .sep{height:1px;background:#233042;margin:6px 4px}
  </style>
</head>
<body>
  <!-- ===================== UI ===================== -->
  <div id="topbar">
    <div class="left">
      <label for="cloud-year-select">Anno</label>
      <select id="cloud-year-select"></select>
    </div>
    <div class="center">
      <span id="auth-status">ðŸ‘¤ ospite</span>
      <button id="btn-login">Login</button>
      <button id="btn-logout" style="display:none">Logout</button>
    </div>
    <div class="right"></div>
  </div>

  <div class="wrap">
    <div class="card" style="margin-top:10px">
      <div class="tabsbar">
        <div class="tabs" id="tabs"></div>
        <div class="bar-right">
          <div class="searchbox">
            <input id="search-q" type="text" placeholder="Cerca"/>
            <button id="search-prev" class="btn mini" title="Precedente">Prev</button>
            <button id="search-next" class="btn mini" title="Successivo">Next</button>
            <div id="search-count" class="search-count">0/0</div>
          </div>
          <button id="jump-today" class="btn mini" title="Vai a oggi">Oggi</button>
          <button id="btn-export-year" class="btn mini" title="Scarica selections e log dell'anno">Download</button>
          <input id="upload-input" type="file" style="display:none" />
          <button id="btn-upload-file" class="btn mini" title="Carica un file nella cartella public">Upload</button>
        </div>
      </div>
      <div id="month" class="month">
        <table id="calendar">
          <thead id="thead"></thead>
        </table>
      </div>
    </div>

    <div class="card" style="margin-top:10px">
      <h2 style="margin:0 0 8px;font-size:14px;color:#9bb0c9">Terminale</h2>
      <div id="terminal" class="terminal" aria-live="polite" aria-atomic="false"></div>
    </div>
  </div>

  <!-- context menu -->
  <div id="ctx" class="ctx" role="menu" aria-hidden="true">
    <div class="itm" data-cmd="copy" tabindex="0">Copia</div>
    <div class="itm" data-cmd="paste" tabindex="0">Incolla</div>
    <div class="sep"></div>
    <div class="itm" data-cmd="clear" tabindex="0">Cancella</div>
  </div>

  <datalist id="options-list"></datalist>

  <!-- ===================== SCRIPT ===================== -->
  <script>
  (function(){
    // ===== Utilities base =====
    const $ = (s)=>document.querySelector(s);

    window.logBuffer = window.logBuffer ?? [];
    window.logFlushCursor = window.logFlushCursor ?? 0;

    function log(msg, type='info'){
      (type==='err'?console.error:type==='warn'?console.warn:console.log)(msg);
      const t = document.getElementById('terminal');
      const ts = new Date().toLocaleTimeString();
      const text = '['+ts+'] '+msg;
      window.logBuffer.push(text);
      if(t){
        const line = document.createElement('div');
        line.className = 'ln ' + (type==='err'?'err':type==='warn'?'warn':type==='ok'?'ok':'info');
        line.textContent = text;
        t.appendChild(line);
        t.scrollTop = t.scrollHeight;
      }
    }

    window.addEventListener('error', ev=>log('JS error: '+ev.message,'err'));
    window.addEventListener('unhandledrejection', ev=>log('Promise: '+(ev.reason?.message||ev.reason),'err'));

    // ===== Stato =====
    const state = {
      year: new Date().getFullYear(),
      names: [],
      options: [],
      selections: new Map(),
      holidays: new Set(),
      selected: new Set(),
      anchorCell: null,
      search: { q:'', hits:[], idx:-1 },
      ctxTarget: null,
      stackTop:null, stackBottom:null, stackCenter:null,
    };
    window.state = state;

    // ===== Date utils =====
    const months = ["Gen","Feb","Mar","Apr","Mag","Giu","Lug","Ago","Set","Ott","Nov","Dic"];
    const pad = n => (n<10?"0":"")+n;
    const fmt = d => pad(d.getDate())+"-"+pad(d.getMonth()+1)+"-"+d.getFullYear();

    function isHolidayOrWeekend(d){
      return [6,0].includes(d.getDay()) || state.holidays.has(fmt(d));
    }

    // ===== Cell styling =====
    function styleToken(val){
      const lo=(val||'').toLowerCase();
      if(val==='TS1')return'ts1';
      if(val==='TS2')return'ts2';
      if(['ferie','par','assente','permesso','malattia','meeting','trasferta'].includes(lo))return'att';
      if(lo==='training')return'training';
      if(val==='REC FERIE')return'rec';
      return'';
    }

    function styleCell(input,val,date){
      input.classList.remove('holiday'); input.style.color=''; input.style.fontWeight=''; input.style.fontSize='';
      if(isHolidayOrWeekend(date)) input.classList.add('holiday');
      const lo=(val||'').toLowerCase();
      const heavy = (c)=>{ input.style.color=c; input.style.fontWeight='700'; input.style.fontSize='18px'; };
      if(val==='TS1') heavy('#ef4444');
      else if(val==='TS2') heavy('#3b82f6');
      else if(['ferie','par','assente','permesso','malattia','meeting','trasferta'].includes(lo)) heavy('#f59e0b');
      else if(lo==='training') heavy('#0ea5e9');
      else if(val==='REC FERIE') heavy('#8b5cf6');
    }

    // ===== Context menu (unificato, senza legacy) =====
    const ctx = document.getElementById('ctx');

    function hideCtx(){ ctx.style.display='none'; ctx.setAttribute('aria-hidden','true'); }
    function showCtx(x,y){
      ctx.style.position='fixed';
      ctx.style.left=x+'px';
      ctx.style.top=y+'px';
      ctx.style.display='block';
      ctx.setAttribute('aria-hidden','false');
    }
    window.hideCtx = hideCtx; window.showCtx = showCtx;

    function openCtxForCell(td, x, y){
      ensureSelectionOn(td);
      state.ctxTarget = td;
      showCtx(x,y);
    }

    function handleCtxAction(e){
      const it = e.target && e.target.closest('.itm');
      if (!it) return;
      e.preventDefault();
      e.stopPropagation();
      const cmd = it.dataset.cmd;
      hideCtx();
      try{
        if (cmd === 'copy') {
          copySelectionToClipboard();
        } else if (cmd === 'paste') {
          pasteFromClipboardAt(state.ctxTarget);
        } else if (cmd === 'clear') {
          if (state.ctxTarget) writeCell(state.ctxTarget, '');
        }
      }catch(_){ /* noop */ }
    }

    let __ctxArmed = false;
    ctx.addEventListener('mousedown', (e)=>{ if (e.button===0 && e.target.closest('.itm')) __ctxArmed = true; });
    ctx.addEventListener('touchstart', (e)=>{ if (e.target.closest('.itm')) __ctxArmed = true; e.stopPropagation(); e.preventDefault(); }, {passive:false});
    ctx.addEventListener('click', handleCtxAction, false);
    ctx.addEventListener('touchend', handleCtxAction, {passive:false});

    // Cattura eventi fuori dal menu per non richiuderlo prematuramente (multi-pointer compat)
    ['pointerdown','mousedown','touchstart','touchend','click'].forEach(function(type){
      ctx.addEventListener(type, function(e){
        if (e.target && e.target.closest('.itm')) return;
        e.stopPropagation();
      }, true);
    });

    // ===== iOS paste fallback (una sola versione) =====
    async function iosManualPasteDialog(){
      return new Promise((resolve) => {
        const wrap = document.createElement('div');
        wrap.style.position='fixed'; wrap.style.inset='0'; wrap.style.background='rgba(0,0,0,.35)'; wrap.style.zIndex='99999';
        wrap.style.display='flex'; wrap.style.alignItems='center'; wrap.style.justifyContent='center';
        const box = document.createElement('div');
        box.style.background='white'; box.style.border='1px solid var(--border)'; box.style.borderRadius='12px';
        box.style.width='min(560px, 92vw)'; box.style.maxWidth='92vw'; box.style.padding='12px'; box.style.boxShadow='0 12px 28px rgba(0,0,0,.25)';
        box.style.color='var(--text)'; box.style.font='14px/1.4 system-ui,-apple-system,Segoe UI,Roboto,Ubuntu';
        box.innerHTML = `
          <div style="font-weight:700; margin-bottom:8px;">Incolla</div>
          <div style="color:var(--muted); font-size:12px; margin-bottom:6px;">Tocca nella casella e usa <b>Incolla</b>.</div>
          <textarea id="__ios_paste_ta" rows="6" style="width:100%; box-sizing:border-box; border:1px solid var(--border); border-radius:8px; padding:8px; background:var(--surface); color:var(--text);"></textarea>
          <div style="display:flex; gap:8px; justify-content:flex-end; margin-top:10px;">
            <button id="__ios_paste_cancel" class="btn mini">Annulla</button>
            <button id="__ios_paste_ok" class="btn mini">OK</button>
          </div>`;
        wrap.appendChild(box); document.body.appendChild(wrap);
        const ta = box.querySelector('#__ios_paste_ta');
        const btnOk = box.querySelector('#__ios_paste_ok');
        const btnCancel = box.querySelector('#__ios_paste_cancel');
        setTimeout(()=>{ try{ ta.focus(); }catch(_){} },0);
        btnOk.addEventListener('click', ()=>{ const v = ta.value||''; document.body.removeChild(wap=wrap); resolve(v.trim()? v : null); });
        btnCancel.addEventListener('click', ()=>{ document.body.removeChild(wrap); resolve(null); });
        wrap.addEventListener('click', (e)=>{ if(e.target===wrap){ document.body.removeChild(wrap); resolve(null); } });
      });
    }

    // ===== Selezione & clipboard =====
    function clearSelection(){ state.selected.forEach(td=>td.classList.remove('selected')); state.selected.clear(); }
    function addToSelection(td){ if(!td || !td.classList.contains('cell')) return; if(!state.selected.has(td)){ state.selected.add(td); td.classList.add('selected'); } state.anchorCell = td; }
    function ensureSelectionOn(td){ if(!td || !td.classList.contains('cell')) return; clearSelection(); addToSelection(td); state.anchorCell = td; }

    function selectionBounds(){
      let minR=Infinity, maxR=-Infinity, minC=Infinity, maxC=-Infinity;
      state.selected.forEach(td=>{ const r=td.closest('tr').rowIndex, c=td.cellIndex; if(r<minR) minR=r; if(r>maxR) maxR=r; if(c<minC) minC=c; if(c>maxC) maxC=c; });
      if(minR===Infinity) return null; return {minR,maxR,minC,maxC};
    }

    function gridFromSelection(){
      const b = selectionBounds(); if(!b) return {grid:[[]], w:0, h:0};
      const table = document.getElementById('calendar');
      const h = b.maxR - b.minR + 1, w = b.maxC - b.minC + 1;
      const grid = Array.from({length:h}, ()=>Array(w).fill(''));
      for(let r=b.minR; r<=b.maxR; r++){
        const row = table.rows[r];
        for(let c=b.minC; c<=b.maxC; c++){
          const td = row.cells[c];
          if(td && td.classList.contains('cell')){ grid[r-b.minR][c-b.minC] = (td.querySelector('input').value||'').trim(); }
        }
      }
      return {grid,w,h};
    }
    function textFromGrid(grid){ return grid.map(row => row.join('\t')).join('\n'); }
    function gridFromText(text){
      const lines = String(text).replace(/\r/g,'').split('\n').filter(l=>l.length>0);
      if(!lines.length) return {grid:[[""]], w:1, h:1};
      const useTab = lines.some(l=>l.includes('\t'));
      const grid = lines.map(l=> (useTab? l.split('\t') : l.split(',')) );
      const w = Math.max(...grid.map(r=>r.length));
      grid.forEach(r=>{ if(r.length<w) r.push(...Array(w-r.length).fill('')); });
      return {grid, w, h:grid.length};
    }

    async function copySelectionToClipboard(){
      if(state.selected.size===0){ log('Nessuna cella selezionata.','warn'); return; }
      const {grid} = gridFromSelection(); const text = textFromGrid(grid);
      try{
        if(navigator.clipboard?.writeText){ await navigator.clipboard.writeText(text); }
        else{
          const ta=document.createElement('textarea'); ta.value=text; ta.style.position='fixed'; ta.style.opacity='0'; document.body.appendChild(ta); ta.select(); document.execCommand('copy'); document.body.removeChild(ta);
        }
        log(`Copiato ${grid.length}Ã—${(grid[0]||[]).length} dalla selezione`,'ok');
      }catch(err){ log('Copia non riuscita: '+err.message,'warn'); }
    }

    async function pasteFromClipboardAt(startTd){
      if(!startTd) return;
      let txt = '';
      try{ if(navigator.clipboard?.readText){ txt = await navigator.clipboard.readText(); } }catch(_){ }
      if(!txt || !txt.trim()){
        const maybe = await iosManualPasteDialog();
        if(maybe==null){ log('Niente da incollare.','warn'); return; }
        txt = maybe;
      }
      const payload = gridFromText(txt); pasteGridAt(startTd, payload.grid);
    }

    function pasteGridAt(startTd, grid){
      if(!startTd) return; const table = document.getElementById('calendar');
      const startR = startTd.closest('tr').rowIndex; const startC = startTd.cellIndex;
      if(state.selected.size>1 && grid.length===1 && grid[0].length===1){
        const v = grid[0][0]; state.selected.forEach(td => writeCell(td, v)); log(`Incollato valore in ${state.selected.size} celle`,'ok'); return; }
      let count=0; for(let r=0;r<grid.length;r++){ const row = table.rows[startR+r]; if(!row) break; for(let c=0;c<grid[r].length;c++){ const td = row.cells[startC+c]; if(!td || !td.classList.contains('cell')) break; writeCell(td, grid[r][c]); count++; }}
      log(`Incollato blocco ${grid.length}Ã—${grid[0].length} (celle aggiornate: ${count})`,'ok');
    }

    document.addEventListener('copy', (e)=>{
      const active = document.activeElement; const isFormEl = active && (active.tagName==='INPUT' || active.tagName==='TEXTAREA' || active.isContentEditable); const inCellEditing = isFormEl && active.closest('.cell.editing'); if(isFormEl && !inCellEditing) return;
      if(state.selected.size===0) return; const {grid} = gridFromSelection(); const text = textFromGrid(grid);
      try{ e.clipboardData.setData('text/plain', text); e.preventDefault(); log(`Copiato ${grid.length}Ã—${(grid[0]||[]).length} dalla selezione`,'ok'); }catch(err){ log('Copia non riuscita: '+err.message,'warn'); }
    });

    document.addEventListener('paste', (e)=>{
      const active = document.activeElement; const isFormEl = active && (active.tagName==='INPUT' || active.tagName==='TEXTAREA' || active.isContentEditable); const inCellEditing = isFormEl && active.closest('.cell.editing'); if(isFormEl && !inCellEditing) return; const multiSel = state.selected.size>1; if(inCellEditing && !multiSel) return;
      e.preventDefault(); const txt = e.clipboardData.getData('text/plain') || ''; if(!txt){ log('Niente da incollare.','warn'); return; }
      const payload = gridFromText(txt); const b = selectionBounds(); let startTd = null; if(b){ const table = document.getElementById('calendar'); startTd = table.rows[b.minR].cells[b.minC]; } else if(state.anchorCell){ startTd = state.anchorCell; } else { log('Seleziona una cella dove incollare.','warn'); return; } pasteGridAt(startTd, payload.grid);
    });

    // ===== Editing celle =====
    function enterEdit(td, opts={selectAll:true, initialChar:null}){
      td.classList.add('editing');
      const input = td.querySelector('input'); const chip = td.querySelector('.chip');
      if(chip) chip.classList.add('hidden'); if(input) input.classList.remove('hidden');
      if(input){ input.dataset.orig = input.value; setTimeout(()=>{ input.focus(); if(opts.selectAll){ input.select(); } else { if(opts.initialChar!=null) input.value = String(opts.initialChar); try{ const end = input.value.length; input.setSelectionRange(end,end); }catch(_){} }},0); }
    }

    function exitEdit(td, saveIt){
      const input=td.querySelector('input'); if(!input) return; if(saveIt){ onCellCommit(input); } else { input.value=input.dataset.orig||input.value; }
      td.classList.remove('editing'); syncChip(td);
    }

    function onCellCommit(input){
      const td = input.closest('td.cell'); const val = (input.value||'').trim(); writeCell(td,val);
    }

    function writeCell(td,val){
      const input = td.querySelector('input'); const chip = td.querySelector('.chip'); const prev = (input.value||'').trim();
      input.value = (val||'');
      const parts = td.dataset.date.split('-'); const d = new Date(+parts[2], +parts[1]-1, +parts[0]);
      styleCell(input, input.value, d); syncChip(td); updateRowCount(td.closest('tr'));
      if(prev!==input.value){ log(`Cell ${td.dataset.key} => '${input.value}'`,'cell'); }
    }

    function syncChip(td){
      const input = td.querySelector('input'); const chip = td.querySelector('.chip'); const val = (input.value||'').trim();
      if(td.classList.contains('editing')){ chip.classList.add('hidden'); input.classList.remove('hidden'); return; }
      if(val){
        chip.textContent = val; chip.title = val; let klass = 'chip '+styleToken(val); const p = td.dataset.date.split('-'); const d = new Date(+p[2], +p[1]-1, +p[0]); if(isHolidayOrWeekend(d)) klass += ' holiday'; chip.className = klass; chip.classList.remove('hidden'); input.classList.add('hidden');
      }else{ chip.removeAttribute('title'); chip.textContent=''; chip.className='chip hidden'; input.classList.remove('hidden'); }
    }

    // ===== Calendar rendering =====
    function getColumns(){ return state.names.length? state.names : ['Mario','Luisa','Anna']; }

    function buildHeader(){
      const thead = document.getElementById('thead'); thead.innerHTML=''; const hr = document.createElement('tr');
      const thD = document.createElement('th'); thD.className='datecol'; thD.textContent='Data'; hr.appendChild(thD);
      getColumns().forEach(n=>{ const th=document.createElement('th'); th.className='name'; th.textContent=n; hr.appendChild(th); });
      const thC = document.createElement('th'); thC.className='small'; thC.textContent=' '; hr.appendChild(thC);
      thead.appendChild(hr);
    }

    function daysInMonth(y,m){ return new Date(y, m, 0).getDate(); }

    function makeCell(date,name){
      const td=document.createElement('td'); td.className='cell'; td.dataset.date=fmt(date); td.dataset.name=name; td.dataset.key=td.dataset.date+','+name;
      const input=document.createElement('input'); input.dataset.key=td.dataset.key; input.dataset.date=td.dataset.date; input.dataset.name=name;
      const chip=document.createElement('div'); chip.className='chip hidden'; chip.draggable=true;
      // clic / dblclick / touch
      td.addEventListener('mousedown', (e)=>{ if(e.button!==0) return; if(e.target.closest('.chip')) return; selectionHandleMouse(td,e); });
      td.addEventListener('dblclick', (e)=>{ if(e.target.closest('.chip')) return; e.preventDefault(); e.stopPropagation(); enterEdit(td); });
      chip.addEventListener('dblclick', (e)=>{ e.preventDefault(); e.stopPropagation(); enterEdit(td); });
      chip.addEventListener('click', (e)=>{ if (window.matchMedia('(pointer: coarse)').matches) { e.preventDefault(); e.stopPropagation(); enterEdit(td); }});

      // input
      input.addEventListener('focus', ()=>{ input.dataset.orig = input.value; td.classList.add('editing'); });
      input.addEventListener('keydown', (e)=>{
        if(e.key==='Enter'){ e.preventDefault(); exitEdit(td,true); return; }
        if(e.key==='Escape'){ e.preventDefault(); exitEdit(td,false); return; }
      });
      input.addEventListener('blur', ()=>{ exitEdit(td,true); });
      input.addEventListener('input', ()=>{ const p=input.dataset.date.split('-'); const d=new Date(+p[2], +p[1]-1, +p[0]); styleCell(input,(input.value||'').trim(),d); });

      // drag-n-drop chip
      chip.addEventListener('dragstart', e=>{ chip.classList.add('dragging'); const key=td.dataset.key; const value=(input.value||'').trim(); e.dataTransfer.setData('application/x-planny', JSON.stringify({fromKey:key, value})); e.dataTransfer.setData('text/plain', value); e.dataTransfer.effectAllowed='move'; });
      chip.addEventListener('dragend', ()=> chip.classList.remove('dragging'));

      // drop target
      td.addEventListener('dragover', e=>{ e.preventDefault(); td.classList.add('droptarget'); });
      td.addEventListener('dragleave', ()=> td.classList.remove('droptarget'));
      td.addEventListener('drop', e=>{
        e.preventDefault(); td.classList.remove('droptarget');
        const payload=e.dataTransfer.getData('application/x-planny'); if(!payload) return; let data=null; try{data=JSON.parse(payload);}catch(_){ }
        if(!data) return; const fromKey=data.fromKey, value=data.value, toKey=td.dataset.key; if(fromKey===toKey) return; const prev = (state.selections.get(toKey)||'');
        state.selections.delete(fromKey); if(value) state.selections.set(toKey, value);
        refreshCellByKey(fromKey); refreshCellByKey(toKey);
      });

      // context menu apertura
      td.addEventListener('contextmenu', (e)=>{ e.preventDefault(); const r = td.getBoundingClientRect(); const cx = e.clientX || (r.left + r.width/2); const cy = e.clientY || (r.top + r.height/2); openCtxForCell(td, cx, cy); });

      td.appendChild(input); td.appendChild(chip); return td;
    }

    function updateRowCount(tr){
      const inputs = [...tr.querySelectorAll('input')]; const filled = inputs.reduce((a,i)=> a + (i.value.trim()?1:0), 0); const total = inputs.length; const tdCount = tr.querySelector('.count'); if(!tdCount) return; tdCount.className = 'count led ' + countClass(filled, total); if(!tdCount.querySelector('.dot')){ tdCount.innerHTML = '<span class="dot" aria-hidden="true"></span>'; } tdCount.title = `${filled}/${total}`;
    }

    function refreshCellByKey(key){ const td=document.querySelector(`td.cell[data-key="${CSS.escape(key)}"]`); if(!td) return; const input=td.querySelector('input'); input.value=state.selections.get(key)||''; const p=td.dataset.date.split('-'); const d=new Date(+p[2], +p[1]-1, +p[0]); styleCell(input,input.value,d); syncChip(td); updateRowCount(td.closest('tr')); }

    function countClass(n,t){ const q3=(3*t)/4,h=t/2,q=t/4; return n>q3?'c-red':n>h?'c-orange':n>q?'c-yellow':'c-white'; }

    function makeMonthSection(m){
      const y=state.year, names=getColumns(); const tbody=document.createElement('tbody'); tbody.dataset.m=m; const days=daysInMonth(y,m);
      for(let d=1; d<=days; d++){
        const tr=document.createElement('tr'); const dateObj=new Date(y, m-1, d); tr.dataset.date=fmt(dateObj);
        const dow=['Dom','Lun','Mar','Mer','Gio','Ven','Sab'][dateObj.getDay()]; const mon = months[m-1];
        const tdDate=document.createElement('td'); tdDate.classList.add('datecol'); tdDate.innerHTML='<div class="rowhdr">'+mon+' '+dow+' '+pad(d)+'</div>'; tr.appendChild(tdDate);
        let filled=0; names.forEach(name=>{ const td=makeCell(dateObj,name), input=td.querySelector('input'), key=td.dataset.key, val=state.selections.get(key)||''; if(val){ input.value=val; filled++; } styleCell(input,input.value,dateObj); syncChip(td); tr.appendChild(td); });
        const tdCount = document.createElement('td'); tdCount.className = 'count led ' + countClass(filled, names.length); tdCount.innerHTML = '<span class="dot" aria-hidden="true"></span>'; tdCount.title = `${filled}/${names.length}`; tr.appendChild(tdCount);
        tbody.appendChild(tr);
      }
      return tbody;
    }

    function setActiveTab(m){ document.querySelectorAll('.tab').forEach(x=>x.classList.remove('active')); const btn=document.querySelector('.tab[data-m="'+m+'"]').classList.add('active'); state.stackCenter = m; }
    function updateScrollSnapPadding(){ const c=$('#month'); const thead=$('#thead'); if(!c||!thead) return; const h=Math.round(thead.getBoundingClientRect().height)||0; c.style.scrollPaddingTop = h + 'px'; }

    function renderStack(centerMonth){
      const table = document.getElementById('calendar'); const c=$('#month'); const prevScroll=c.scrollTop; buildHeader(); table.querySelectorAll('tbody').forEach(tb=>tb.remove());
      const start = Math.max(1, centerMonth-1); const end   = Math.min(12, centerMonth+1); let targetSection=null;
      for(let m=start; m<=end; m++){ const sec = makeMonthSection(m); table.appendChild(sec); if(m===centerMonth) targetSection=sec; }
      state.stackTop = start; state.stackBottom = end; state.stackCenter = centerMonth; updateScrollSnapPadding(); if(targetSection){ c.scrollTop = targetSection.offsetTop; } else { c.scrollTop = prevScroll; }
      document.querySelectorAll('.tab').forEach(btn=>{ btn.classList.toggle('active', Number(btn.dataset.m)===centerMonth); });
    }

    function monthNearestCenter(){ const c=$('#month'); const cRect=c.getBoundingClientRect(); const centerY=cRect.top + c.clientHeight/2; let bestM=null, bestDist=Infinity; document.querySelectorAll('#calendar tbody[data-m]').forEach(sec=>{ const r=sec.getBoundingClientRect(); const mid=r.top + r.height/2; const dist=Math.abs(mid - centerY); if(dist<bestDist){ bestDist=dist; bestM=parseInt(sec.dataset.m,10); } }); return bestM||state.stackCenter||1; }

    function ensurePrevMonth(){ if(state.stackTop<=1) return; const table=$('#calendar'); const c=$('#month'); const newM=state.stackTop-1; const sec=makeMonthSection(newM); table.insertBefore(sec, table.querySelector('tbody')); const added=sec.offsetHeight; c.scrollTop += added; updateScrollSnapPadding(); state.stackTop=newM; }
    function ensureNextMonth(){ if(state.stackBottom>=12) return; const table=$('#calendar'); const newM=state.stackBottom+1; const sec=makeMonthSection(newM); table.appendChild(sec); state.stackBottom=newM; updateScrollSnapPadding(); }

    function setupScrollHandlers(){
      window.addEventListener('resize', updateScrollSnapPadding);
      const c=$('#month'); if(!c) return;
      let flipping=false;
      c.addEventListener('scroll', (e)=>{
        if(flipping) return; const el=e.target; const atTop = el.scrollTop <= 6; const atBottom = el.scrollTop + el.clientHeight >= el.scrollHeight - 6;
        if(atTop && state.stackTop>1){ flipping=true; ensurePrevMonth(); setTimeout(()=>flipping=false, 50); }
        else if(atBottom && state.stackBottom<12){ flipping=true; ensureNextMonth(); setTimeout(()=>flipping=false, 50); }
        const m = monthNearestCenter(); if(m !== state.stackCenter){ document.querySelectorAll('.tab').forEach(btn=>{ btn.classList.toggle('active', Number(btn.dataset.m)===m); }); state.stackCenter=m; }
      }, {passive:true});
    }

    // Gestione selezione con mouse/drag
    function selectionHandleMouse(td, e){
      if(e.shiftKey && state.anchorCell){ selectRange(state.anchorCell, td); }
      else if(e.ctrlKey || e.metaKey){ if(state.selected.has(td)){ td.classList.remove('selected'); state.selected.delete(td); } else addToSelection(td); }
      else { clearSelection(); addToSelection(td); }
    }

    function selectRange(aTd, bTd){ if(!aTd||!bTd) return; const table = document.getElementById('calendar'); const aRow=aTd.closest('tr').rowIndex, bRow=bTd.closest('tr').rowIndex, aCol=aTd.cellIndex, bCol=bTd.cellIndex; const minR=Math.min(aRow,bRow), maxR=Math.max(aRow,bRow), minC=Math.min(aCol,bCol), maxC=Math.max(aCol,bCol); clearSelection(); for(let r=minR; r<=maxR; r++){ const row = table.rows[r]; if(!row) continue; for(let c=minC; c<=maxC; c++){ const cell = row.cells[c]; if(cell && cell.classList.contains('cell')) addToSelection(cell); } } }

    document.addEventListener('mousedown', (e)=>{ if(!e.target.closest('.cell.editing')){ document.querySelectorAll('td.cell.editing').forEach(el=>{ try{ exitEdit(el,true); }catch(_){ } }); } }, true);
    document.addEventListener('keydown', (e)=>{
      const active=document.activeElement; const isFormEl=active && (active.tagName==='INPUT'||active.tagName==='TEXTAREA'||active.isContentEditable); const inCellEditing=isFormEl && active.closest('.cell.editing'); if(isFormEl && !inCellEditing) return;
      const td = state.anchorCell || (state.selected.size ? Array.from(state.selected)[0] : null);
      if((e.ctrlKey||e.metaKey) && e.key.toLowerCase()==='c'){ if(inCellEditing && state.selected.size<=1) return; e.preventDefault(); copySelectionToClipboard(); return; }
      if((e.ctrlKey||e.metaKey) && e.key.toLowerCase()==='v'){ if(inCellEditing && state.selected.size<=1) return; e.preventDefault(); const b=selectionBounds(); let startTd=null; if(b){ const table=document.getElementById('calendar'); startTd=table.rows[b.minR].cells[b.minC]; } else if(state.anchorCell){ startTd=state.anchorCell; } else { log('Seleziona una cella dove incollare.','warn'); return; } pasteFromClipboardAt(startTd); return; }
      if((e.key==='Delete' || e.key==='Backspace') && !inCellEditing){ if(state.selected.size){ e.preventDefault(); state.selected.forEach(td=> writeCell(td, '')); }}
      if(!inCellEditing && !isFormEl && td && td.classList.contains('cell')){ const key=e.key; const isPrintable = key.length===1 && !e.ctrlKey && !e.metaKey && !e.altKey; const isF2=key==='F2'; if(isPrintable || isF2){ e.preventDefault(); if(isF2) enterEdit(td, {selectAll:true, initialChar:null}); else enterEdit(td, {selectAll:false, initialChar:key}); }}
      if(e.key==='Escape'){ hideCtx(); }
    });

    // ===== Tabs & rendering iniziale =====
    function buildTabs(){ const tabs=$('#tabs'); tabs.innerHTML=''; const today=new Date(); const currentMonth=(today.getFullYear()===state.year)?(today.getMonth()+1):1; months.forEach((m,i)=>{ const monthIndex=i+1; const b=document.createElement('button'); b.className='tab'+(monthIndex===currentMonth?' active':''); b.textContent=m; b.dataset.m=monthIndex; b.onclick=()=>{ renderStack(monthIndex); }; tabs.appendChild(b); }); }

    function renderAndJumpToToday(){ const today=new Date(); const sameYear=today.getFullYear()===state.year; buildTabs(); renderStack(sameYear?(today.getMonth()+1):1); setupScrollHandlers(); if(sameYear){ const tr=document.querySelector('tr[data-date="'+fmt(today)+'"]'); if(tr){ tr.classList.add('today'); const c=document.getElementById('month'); const head=document.getElementById('thead'); const headH=head?Math.round(head.getBoundingClientRect().height):0; c.scrollTop = Math.max(0, tr.offsetTop - headH - 4); document.querySelectorAll('.tab').forEach(btn=>{ btn.classList.toggle('active', Number(btn.dataset.m)===(today.getMonth()+1)); }); } }}

    // bootstrap
    document.addEventListener('DOMContentLoaded', ()=>{
      // Inizializza select anno (semplice)
      const yearSel = document.getElementById('cloud-year-select');
      const Y = new Date().getFullYear();
      for(let y=Y-1; y<=Y+1; y++){ const opt=document.createElement('option'); opt.value=String(y); opt.textContent=String(y); if(y===Y) opt.selected=true; yearSel.appendChild(opt); }
      yearSel.addEventListener('change', ()=>{ state.year = parseInt(yearSel.value,10); renderAndJumpToToday(); });

      renderAndJumpToToday();
      log('Ready','ok');
    });
  })();
  </script>
</body>
</html>
